{"version":3,"file":"static/js/470.1d43583f.chunk.js","mappings":"0QASA,MAiFA,GAAeA,EAAAA,EAAAA,IAAQ,MAjFKC,IAAQC,EAAAA,EAAAA,GAAA,IAC/BC,EAAAA,EAAAA,IACD,CACEC,cAAgBC,IAAI,CAAQC,KAAM,eAAgBC,QAASF,KAE7DJ,KA4EJ,EAxEsBO,KACpB,MAAOC,EAAaC,IAAkBC,EAAAA,EAAAA,UAAS,IAEzCC,GAAUC,EAAAA,EAAAA,cA6BhB,OACEC,EAAAA,EAAAA,KAAA,WAASC,UAAU,eAAcC,UAC/BF,EAAAA,EAAAA,KAACG,EAAAA,EAAS,CAAAD,UACRF,EAAAA,EAAAA,KAACI,EAAAA,EAAG,CAACH,UAAU,+DAA8DC,UAC3EF,EAAAA,EAAAA,KAACK,EAAAA,EAAG,CAACC,GAAG,IAAIC,GAAG,KAAKN,UAAU,oBAAmBC,UAC/CF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,kBAAiBC,UAC9BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCM,EAAAA,EAAAA,MAAA,OAAKP,UAAU,4BAA2BC,SAAA,EACxCF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,mBAAkBC,SAAC,qBACjCM,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACR,UAAU,OAAMC,SAAA,EACpBF,EAAAA,EAAAA,KAACS,EAAAA,EAAKC,MAAK,CAAAR,UACTF,EAAAA,EAAAA,KAACS,EAAAA,EAAKE,QAAO,CACXnB,KAAK,WACLS,UAAU,oBACVW,GAAG,uBACHC,YAAY,qBACZC,aAAa,MACbC,MAAOpB,EACPqB,SA7CWC,IAC/BrB,EAAeqB,EAAEC,OAAOH,MAAM,EA6CVI,UAAQ,OAIZnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAM,CACLnB,UAAU,6BACVoB,QAhDQC,UAC1B,IAEE,MAAMC,EAAkB5B,QAEQ6B,EAAAA,EAAAA,IAAcD,IAG5CE,aAAaC,WAAW,eACxB5B,EAAQ6B,KAAK,iBAEbC,EAAAA,GAAMC,MAAM,4BAA6B,CACvCC,SAAU,YACVC,UAAW,IACXC,iBAAiB,EACjBC,cAAc,GAGpB,CAAE,MAAOJ,GACPK,QAAQC,IAAIN,EAAO,QACrB,GA4B+C3B,SAC9B,qCAUP,G","sources":["views/backend/pages/auth/resetPassword.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Container, Row, Col, Form, Button } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n// Import your resetPassword function here\nimport { resetPassword } from \"../../../../store/redux/API/auth/Register\"; \n\nconst mapDispatchToProps = (dispatch) => ({\n  ...bindActionCreators(\n    {\n      rtlModeAction: (mode) => ({ type: \"SET_RTL_MODE\", payload: mode }),\n    },\n    dispatch\n  ),\n});\n\nconst ResetPassword = () => {\n  const [newPassword, setNewPassword] = useState(\"\"); // New password field\n\n  const history = useHistory();\n\n  const handleNewPasswordChange = (e) => {\n    setNewPassword(e.target.value);\n  };\n\n  const handleresetPassword = async () => {\n    try {\n      // Pass the new password to your resetPassword function\n      const newPasswordData = newPassword;\n\n      const isPasswordChanged = await resetPassword(newPasswordData);\n\n      if (isPasswordChanged) {\n        localStorage.removeItem('forgetemail')\n        history.push(\"/pages/login\");\n      } else {\n        toast.error(\"Failed to change password\", {\n          position: \"top-right\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n        });\n      }\n    } catch (error) {\n      console.log(error, \"error\");\n    }\n  };\n\n  return (\n    <section className=\"sign-in-page\">\n      <Container>\n        <Row className=\"justify-content-center align-items-center height-self-center\">\n          <Col lg=\"5\" md=\"12\" className=\"align-self-center\">\n            <div className=\"sign-user_card \">\n              <div className=\"sign-in-page-data\">\n                <div className=\"sign-in-from w-100 m-auto\">\n                  <h3 className=\"mb-3 text-center\">Change Password</h3>\n                  <Form className=\"mt-4\">\n                    <Form.Group>\n                      <Form.Control\n                        type=\"password\"\n                        className=\"form-control mb-0\"\n                        id=\"exampleInputPassword\"\n                        placeholder=\"Enter New password\"\n                        autoComplete=\"off\"\n                        value={newPassword}\n                        onChange={handleNewPasswordChange}\n                        required\n                      />\n                    </Form.Group>\n\n                    <Button\n                      className=\"btn btn-hover btn-primary1\"\n                      onClick={handleresetPassword}\n                    >\n                      Change Password\n                    </Button>\n                  </Form>\n                </div>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\n\nexport default connect(null, mapDispatchToProps)(ResetPassword);\n"],"names":["connect","dispatch","_objectSpread","bindActionCreators","rtlModeAction","mode","type","payload","ResetPassword","newPassword","setNewPassword","useState","history","useHistory","_jsx","className","children","Container","Row","Col","lg","md","_jsxs","Form","Group","Control","id","placeholder","autoComplete","value","onChange","e","target","required","Button","onClick","async","newPasswordData","resetPassword","localStorage","removeItem","push","toast","error","position","autoClose","hideProgressBar","closeOnClick","console","log"],"sourceRoot":""}